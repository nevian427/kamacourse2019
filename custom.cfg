route[AUTH] {
  if (is_method("REGISTER") || (from_uri==myself && (!is_method("BYE")))) { /* проверяем что REGISTER принадлежит именно нашему серверу */
    if (!auth_check("$fd", "subscriber", "1")) { /* auth_check 1. Существует ли в данном запросе WWW-Authenticate, и если да, то проверяет логин и пароль */
      auth_challenge("$fd", "0"); /* посылает 40Х ответ с контрольными данными */
      exit; /* выход из скрипта */
    } else {
      consume_credentials();
    }
  }
  return; /* выход из маршрута */
}


route[REGISTRAR] {
  if (!is_method("REGISTER")) return(1); /*не обрабатывать если запрос не REGISTER, вернуть true*/
  if (!save("location")) { /* попытка сохранения данных в location */
    sl_reply_error(); /* отправить 403 ответ если попытка сохранения не удалась */
    return(-1); /* вернуть false */
  } else {
    return(1); /* return true */
  }
  exit;
}


route[NATMANAGE] {
  force_rport(); /* добавляет rport=<внешний порт> к заголовку VIA */ 
  if (is_request() && is_method("REGISTER")) { /* проверка на то, что пакет - это REQUEST */
    fix_nated_register(); /*Сохранение внешнего IP адреса и порта в специальной переменной, которая при вызове save(“location”) положит его в поле received */
    xlog("L_INFO", "***** Received: $avp(RECEIVED)\n");
  }
  fix_nated_contact();
  if (sdp_content()) {
    xlog("L_INFO", "***** SDP found: method $rm/$rs\n");
    if (isflagset(FLAG_INTERNALLY_SOURCED)) {
      xlog("L_INFO", "***** SDP found: internal $si\n");
      $var(rtp_dir)="direction=private direction=public";
    } else {
      xlog("L_INFO", "***** SDP found: external $si\n");
      $var(rtp_dir)="direction=public direction=private";
    }
    rtpengine_manage("ICE=remove replace-origin replace-session-connection $var(rtp_dir)");
  }
  if (is_request() && is_method("BYE|CANCEL")) {
    xlog("L_INFO", "***** RTPEngine delete END($rm/$rs)\n");
    rtpengine_manage();
  }
  if (is_reply() && $rs>299) {
    xlog("L_INFO", "***** RTPEngine delete code $rs\n");
    rtpengine_manage();
  }
}


route[LOCATION] { 
  if (!lookup("location")) { /* проверка, существует ли вызываемый пользователь в location */
    return(-1); /* выход в состоянии false из маршрута */
  }
  return(1); /* выход в состоянии true */
}


route[RELAY]{  
  if (is_method("INVITE")) {
      if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
      if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
   }
  if (!t_relay()) { /* проверка, удачной ли была отправка сообщения */
    sl_reply_error(); /* генерация ответа при неудачной транзакции*/
  }
  exit;
}


route[ROUTING] {
  remove_hf("Route"); /* удалить заголовок Route из входящего сообщения*/
  if (is_method("INVITE|SUBSCRIBE") && !has_totag()) { /*проверка является запрос иницирующим*/
    record_route(); /*добавить заголовок record_route к инициирующему соoбщению*/
  }
}


route[WITHINDLG] {
  if (!has_totag()) return(-1); /* пропустить если он не является внутридиалоговым */
  if (loose_route()) return(1); /* проверка, существует ли Route заголовок в данном пакете*/
      
  if (is_method("ACK")) {
    if (t_check_trans()) { /* проверка, принадлежит ли ACK транзакции */
      return(1);
    } else {
      exit;
    }
  }
  sl_send_reply("404","Not here"); /* послать 404 ответ если не найдено транзакций. */
  exit;
}


route[CANCELING] {
  if (is_method("CANCEL")) {
    if (t_check_trans()) { /* проверить существует ли транзакция для него */
      return(1); /* вернуть true */
    }
    exit;
  }
  return(-1); /* если метод не CANCEL - вернуть false */
}


route[TO_PSTN] {
  route(SETCALLID);
  if(!cr_route("default", "test", "$rU", "$rU", "call_id")) return(-1);
}


route[SETCALLID] {
  if ($(sht(aCIDs=>$fU){s.len}) > 0) {
    $fU = $sht(aCIDs=>$fU);
    xlog("L_INFO", "*****Cached CID for $fU found : $sht(aCIDs=>$fU)\n");
  } else {
    sql_pvquery("ca","select callerid from ExternCallID where extn='$fU'", "$avp(fU)");
    if ($(avp(fU){s.len}) > 0) {
      $fU = $avp(fU);
      $sht(aCIDs=>$fU)=$avp(fU);
      xlog("L_INFO", "***** CID for $fU found in DB: $avp(fU)\n");
    } else {
        xlog("L_INFO", "***** CID for $fU not found\n");
    }
  }
}


route[VIA_REG] {
  $dlg_ctx(timeout_route) = "DIALOG_END";
  $avp(i:10)=43200;
  $dlg_ctx(timeout_bye) = 0;

  dlg_manage(); 
  sql_pvquery("ca", "select l_uuid, auth_username, auth_password, realm, l_domain, r_domain from uacreg", "$avp(uuid), $avp(uname), $avp(passwd), $avp(realm), $avp(l_ipaddr), $avp(dst_ipaddr)");
  uac_replace_from("sip:$avp(uname)@$avp(dst_ipaddr)");
  $ru="sip:"+$tU+"@"+$avp(dst_ipaddr);
  remove_hf("Contact");
  $var(contact)="sip:"+$avp(uname)+"@"+$avp(l_ipaddr);
  insert_hf("Contact: <$var(contact)>\r\n","Call-ID");  
}
  

failure_route[MANAGE_FAILURE] {
  if (t_check_status("401|407")) {
    ##avp_print(); 
    if (uac_auth()) {
      xlog("L_INFO", "***** CSeq diff: $dlg_var(cseq_diff)\n");
      t_relay();
    } else {
      xlog("L_INFO", "***** UAC_AUTH(): credentials not found\n");
    }
  }
  if (t_check_status("403|408|480|^[56]")) {
    if (ds_next_domain()) {
      route(RELAY);
    } else {
      send_reply("404", "No destination");
      rtpengine_manage();
    }
  }
}


route[CLASSIFY_SOURCE] {
  if(ds_is_from_list(MEDIA)) {
    setflag(FLAG_INTERNALLY_SOURCED);
  } else {
    resetflag(FLAG_INTERNALLY_SOURCED);
  }
}


route[DISPATCH] {
  if (!ds_select_domain(MEDIA, 4)) { /*проверка на наличие сервера назначения*/
    send_reply("404", "No destination"); 
    return(-1);
  }
  xlog("L_INFO", "***** Destination set: $avp(ds_dst)\n");
  xlog("L_INFO", "***** DU: $du\n");
  xlog("L_INFO", "***** RU: $ru\n");
  return(1);
}


route[REQINIT] {
  if(src_ip!=myself && !allow_source_address()) {
    if($sht(ipban=>$si)!=$null) {
      // ip is already blocked
      xdbg("***** request from blocked IP - $rm from $fu (IP:$si:$sp)\n");
      exit;
    }
    if (!pike_check_req()) {
      xlog("L_ALERT","***** ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
      $sht(ipban=>$si) = 1;
      exit;
    }
    if ($ua == $null || $ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent") {
      xlog("L_INFO","***** $ci|log| {$rm}:{$rs} $ua blocked because of blacklist\n");
      exit;
    }
  }
  if(!sanity_check("1511", "7")) {
    xlog("L_INFO", "***** Malformed SIP message from $si:$sp\n");
    exit;
  }
  if (!mf_process_maxfwd_header("10")) {
    sl_send_reply("483", "Too Many Hops");
    exit;
  }
}


route[ORIGIN_CHECK] {
  if registered("location", "$fu") {
    xlog("L_INFO", "***** Found registered user\n");
    return(1);
  } else {
    if ((!uac_reg_status("$rU")) && !allow_source_address()) {
      xlog("L_INFO", "***** Source IP ($si:$sp) not allowed\n");
      return(-1);
    }
  }
}


onreply_route[MANAGE_REPLY]{
  route(CLASSIFY_SOURCE);
  route(NATMANAGE);
  xlog("L_INFO", "***** On reply route called for $rs\n");
}
